$date
	Fri Sep 15 09:27:11 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_pkg $end
$var wire 8 ! num [7:0] $end
$var wire 8 " sc [7:0] $end
$var wire 4 # seg_en [3:0] $end
$var parameter 32 $ period $end
$var reg 1 % clk $end
$var reg 1 & kb_clk $end
$var reg 1 ' kb_data $end
$var reg 1 ( rst $end
$scope module DUT $end
$var wire 4 ) binary_num [3:0] $end
$var wire 1 % clk $end
$var wire 1 & kb_clk $end
$var wire 1 ' kb_data $end
$var wire 8 * num [7:0] $end
$var wire 1 ( rst $end
$var wire 8 + sc [7:0] $end
$var wire 4 , seg_en [3:0] $end
$var wire 1 - valid_scan_code $end
$var wire 8 . sev_seg [7:0] $end
$var wire 8 / scan_code_out [7:0] $end
$var wire 1 0 kb_data_sync $end
$var wire 1 1 kb_clk_sync $end
$var wire 1 2 edge_found $end
$var wire 8 3 code_to_display [7:0] $end
$var wire 4 4 binary_out [3:0] $end
$scope module binary_to_sg_inst $end
$var wire 4 5 binary_in [3:0] $end
$var reg 8 6 sev_seg [7:0] $end
$upscope $end
$scope module convert_scancode_inst $end
$var wire 1 % clk $end
$var wire 1 ( rst $end
$var wire 1 0 serial_data $end
$var wire 1 2 edge_found $end
$var reg 4 7 current_counter [3:0] $end
$var reg 4 8 next_counter [3:0] $end
$var reg 10 9 scan_code [9:0] $end
$var reg 8 : scan_code_out [7:0] $end
$var reg 1 - valid_scan_code $end
$upscope $end
$scope module convert_to_binary_inst $end
$var wire 8 ; scan_code_in [7:0] $end
$var reg 4 < binary_out [3:0] $end
$upscope $end
$scope module edge_detector_inst $end
$var wire 1 % clk $end
$var wire 1 ( rst $end
$var wire 1 1 kb_clk_sync $end
$var reg 1 2 edge_found $end
$var reg 1 = kb_clk_in $end
$upscope $end
$scope module keyboard_ctrl_inst $end
$var wire 1 % clk $end
$var wire 1 ( rst $end
$var wire 8 > scan_code_in [7:0] $end
$var wire 1 - valid_code $end
$var reg 8 ? code_to_display [7:0] $end
$var reg 18 @ counter [17:0] $end
$var reg 1 A next_state $end
$var reg 32 B scanCodes [31:0] $end
$var reg 2 C seg_counter [1:0] $end
$var reg 4 D seg_en [3:0] $end
$var reg 1 E state $end
$upscope $end
$scope module sync_keyboard_inst $end
$var wire 1 % clk $end
$var wire 1 & kb_clk $end
$var wire 1 ' kb_data $end
$var reg 1 F clk_1 $end
$var reg 1 G data_1 $end
$var reg 1 1 kb_clk_sync $end
$var reg 1 0 kb_data_sync $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b101000 $
$end
#0
$dumpvars
xG
xF
0E
b0 D
b0 C
b0 B
0A
b0 @
b0 ?
b0 >
x=
b1111 <
b0 ;
b0 :
bx 9
b0 8
b0 7
b10000110 6
bz 5
b1111 4
b0 3
x2
x1
x0
b0 /
b10000110 .
0-
b0 ,
b0 +
b0 *
bz )
0(
0'
0&
0%
b0 #
b0 "
b0 !
$end
#5
0F
0G
0=
1%
#10
0%
#15
01
00
1%
#20
0%
1&
#25
1F
1%
#30
0%
#35
11
1%
#40
0%
0&
1(
#45
b1 @
0F
02
1=
1%
#50
0%
#55
b10 @
01
1%
#60
0%
1&
#65
b11 @
1F
12
0=
1%
#70
0%
#75
b1 8
bx /
bx :
bx >
b0xxxxxxxxx 9
b100 @
02
11
1%
#80
0%
0&
1'
#85
b101 @
0F
1G
1=
1%
#90
0%
#95
b110 @
01
10
1%
#100
0%
1&
#105
b111 @
1F
12
0=
1%
#110
0%
#115
b10xxxxxxxx 9
b1000 @
02
11
1%
#120
0%
0&
0'
#125
b1001 @
0F
0G
1=
1%
#130
0%
#135
b1010 @
01
00
1%
#140
0%
1&
#145
b1011 @
1F
12
0=
1%
#150
0%
#155
b10xxxxxxx 9
b1100 @
02
11
1%
#160
0%
0&
#165
b1101 @
0F
1=
1%
#170
0%
#175
b1110 @
01
1%
#180
0%
1&
#185
b1111 @
1F
12
0=
1%
#190
0%
#195
b0xxxxxxx /
b0xxxxxxx :
b0xxxxxxx >
b10xxxxxx 9
b10000 @
02
11
1%
#200
0%
0&
1'
#205
b10001 @
0F
1G
1=
1%
#210
0%
#215
b10010 @
01
10
1%
#220
0%
1&
#225
b10011 @
1F
12
0=
1%
#230
0%
#235
b10xxxxxx /
b10xxxxxx :
b10xxxxxx >
b10010xxxxx 9
b10100 @
02
11
1%
#240
0%
0&
0'
#245
b10101 @
0F
0G
1=
1%
#250
0%
#255
b10110 @
01
00
1%
#260
0%
1&
#265
b10111 @
1F
12
0=
1%
#270
0%
#275
b10xxxxx /
b10xxxxx :
b10xxxxx >
b10010xxxx 9
b11000 @
02
11
1%
#280
0%
0&
