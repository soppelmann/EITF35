$date
	Tue Oct  3 12:14:29 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_ALU $end
$var wire 1 ! sign $end
$var wire 8 " result [7:0] $end
$var wire 1 # overflow $end
$var parameter 32 $ CLKT $end
$var parameter 32 % period $end
$var reg 8 & A [7:0] $end
$var reg 8 ' B [7:0] $end
$var reg 4 ( FN [3:0] $end
$var reg 1 ) clk $end
$scope module I_ALU $end
$var wire 8 * A [7:0] $end
$var wire 8 + B [7:0] $end
$var wire 4 , FN [3:0] $end
$var wire 8 - result [7:0] $end
$var wire 1 ! sign $end
$var wire 9 . tmp [8:0] $end
$var wire 1 # overflow $end
$var reg 8 / ALU_Result [7:0] $end
$var reg 1 0 pn $end
$upscope $end
$upscope $end
$scope module tb_ALU_ctrl $end
$var wire 2 1 reg_ctrl [1:0] $end
$var wire 4 2 func [3:0] $end
$var parameter 32 3 CLKT $end
$var parameter 32 4 period $end
$var reg 1 5 clk $end
$var reg 1 6 enter $end
$var reg 1 7 rst_n $end
$var reg 1 8 sign $end
$scope module I_ALU_CTRL $end
$var wire 1 5 clk $end
$var wire 1 6 enter $end
$var wire 4 9 func [3:0] $end
$var wire 2 : reg_ctrl [1:0] $end
$var wire 1 7 rst_n $end
$var wire 1 8 sign $end
$var reg 2 ; i_reg [1:0] $end
$var reg 2 < next_i_reg [1:0] $end
$var reg 4 = next_state [3:0] $end
$var reg 4 > state [3:0] $end
$upscope $end
$upscope $end
$scope module tb_binary_to_bcd $end
$var wire 10 ? bcd_out [9:0] $end
$var parameter 32 @ CLKT $end
$var parameter 32 A period $end
$var reg 1 B Clk $end
$var reg 1 C Rst_n $end
$var reg 8 D binary_in [7:0] $end
$scope module I_BINARY_TO_BCD $end
$var wire 8 E binary_in [7:0] $end
$var wire 10 F bcd_out [9:0] $end
$var reg 4 G i [3:0] $end
$var reg 12 H reg_bcd_out [11:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b101000 A
b1010 @
b101000 4
b1010 3
b101000 %
b1010 $
$end
#0
$dumpvars
b0 H
b1000 G
b0 F
b0 E
b0 D
1C
0B
b0 ?
bx >
bx =
bx <
bx ;
bx :
bx 9
08
07
06
05
bx 2
bx 1
00
b101 /
b1000 .
b101 -
b0 ,
b11 +
b101 *
0)
b0 (
b11 '
b101 &
0#
b101 "
0!
$end
#5000
b0 1
b0 :
b0 ;
b0 2
b0 9
b0 >
1B
15
1)
#10000
0B
05
0)
#15000
1B
15
1)
#20000
0B
05
0)
#25000
1B
15
1)
#30000
0B
05
0)
#35000
1B
15
1)
#40000
b1001001001 ?
b1001001001 F
b1001001001 H
b1000 G
b11 "
b11 -
b11 /
b11111001 D
b11111001 E
17
b1 (
b1 ,
b1100 .
b1001 &
b1001 *
0B
05
0)
#41000
b1 <
b1 =
16
#45000
b1 1
b1 :
b1 ;
b1 2
b1 9
b1 >
1B
15
1)
#50000
0B
05
0)
#55000
1B
15
1)
#60000
0B
05
0)
#65000
1B
15
1)
#70000
0B
05
0)
#75000
1B
15
1)
#80000
b10100010 "
b10100010 -
b10100010 /
b10 (
b10 ,
b10010001 '
b10010001 +
b10100010 .
b10001 &
b10001 *
0B
05
0)
#81000
06
#85000
1B
15
1)
#90000
0B
05
0)
#95000
1B
15
1)
#100000
0B
05
0)
#105000
1B
15
1)
#110000
0B
05
0)
#115000
1B
15
1)
#120000
b10101 "
b10101 -
b10101 /
1#
b11 (
b11 ,
b1111100 '
b1111100 +
b100001101 .
b10010001 &
b10010001 *
0B
05
0)
#121000
b10 <
b10 =
16
#125000
b10 1
b10 :
b10 ;
b10 2
b10 9
b10 >
1B
15
1)
#130000
0B
05
0)
#135000
1B
15
1)
#140000
0B
05
0)
#145000
1B
15
1)
#150000
0B
05
0)
#155000
1B
15
1)
#160000
1!
10
b10001101 "
b10001101 -
b10001101 /
b1010 (
b1010 ,
b11111001 '
b11111001 +
b110001101 .
b10010100 &
b10010100 *
0B
05
0)
#161000
06
#165000
1B
15
1)
#170000
0B
05
0)
#175000
1B
15
1)
#180000
0B
05
0)
#185000
1B
15
1)
#190000
0B
05
0)
#195000
1B
15
1)
#200000
0!
00
b1101100 "
b1101100 -
b1101100 /
b1011 (
b1011 ,
b1101001 '
b1101001 +
b100111110 .
b11010101 &
b11010101 *
0B
05
0)
#201000
b11 =
16
#205000
b11 2
b11 9
b11 >
1B
15
1)
#210000
0B
05
0)
#215000
1B
15
1)
#220000
0B
05
0)
#225000
1B
15
1)
#230000
0B
05
0)
#235000
1B
15
1)
#240000
b10000110 "
b10000110 -
b10000110 /
0#
b10 (
b10 ,
b1100011 '
b1100011 +
b10000110 .
b100011 &
b100011 *
0B
05
0)
#241000
06
#245000
1B
15
1)
#250000
0B
05
0)
#255000
1B
15
1)
#260000
0B
05
0)
#265000
1B
15
1)
#270000
0B
05
0)
#275000
1B
15
1)
#280000
b10 "
b10 -
b10 /
1#
b100 (
b100 ,
b1101000 '
b1101000 +
b101011010 .
b11110010 &
b11110010 *
0B
05
0)
#281000
b1011 =
18
#285000
b1011 2
b1011 9
b1011 >
1B
15
1)
#290000
0B
05
0)
#295000
1B
15
1)
#300000
0B
05
0)
#305000
1B
15
1)
#310000
0B
05
0)
#315000
1B
15
1)
#320000
b1 "
b1 -
b1 /
0#
b101101 '
b101101 +
b1011110 .
b110001 &
b110001 *
0B
05
0)
#321000
08
#325000
1B
15
1)
#330000
0B
05
0)
#335000
1B
15
1)
#340000
0B
05
0)
#345000
1B
15
1)
#350000
0B
05
0)
#355000
1B
15
1)
#360000
b100100 '
b100100 +
b1111001 .
b1010101 &
b1010101 *
0B
05
0)
#361000
b1100 =
16
#365000
b1100 2
b1100 9
b1100 >
1B
15
1)
#370000
0B
05
0)
#375000
1B
15
1)
#380000
0B
05
0)
#385000
1B
15
1)
#390000
0B
05
0)
#395000
1B
15
1)
#400000
b0 "
b0 -
b0 /
b1111 (
b1111 ,
b0 '
b0 +
b0 .
b0 &
b0 *
0B
05
0)
#401000
06
#405000
1B
15
1)
#410000
0B
05
0)
#415000
1B
15
1)
#420000
0B
05
0)
#425000
1B
15
1)
#430000
0B
05
0)
#435000
1B
15
1)
#440000
0B
05
0)
