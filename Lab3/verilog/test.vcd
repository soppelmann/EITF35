$date
	Thu Oct  5 20:11:16 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_ALU $end
$var wire 1 ! sign $end
$var wire 8 " result [7:0] $end
$var wire 1 # overflow $end
$var parameter 32 $ CLKT $end
$var parameter 32 % period $end
$var reg 8 & A [7:0] $end
$var reg 8 ' B [7:0] $end
$var reg 4 ( FN [3:0] $end
$var reg 1 ) clk $end
$scope module I_ALU $end
$var wire 8 * A [7:0] $end
$var wire 8 + B [7:0] $end
$var wire 4 , FN [3:0] $end
$var wire 1 ! sign $end
$var wire 9 - tmp [8:0] $end
$var wire 8 . result [7:0] $end
$var wire 1 # overflow $end
$var wire 8 / A_mod3 [7:0] $end
$var reg 9 0 ALU_Result [8:0] $end
$var reg 9 1 A_sign [8:0] $end
$var reg 1 2 pn $end
$scope module my_mod3 $end
$var wire 8 3 mod_in [7:0] $end
$var wire 8 4 mod_out [7:0] $end
$var wire 1 5 sign_in $end
$var reg 8 6 mod3 [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb_ALU_ctrl $end
$var wire 2 7 reg_ctrl [1:0] $end
$var wire 4 8 func [3:0] $end
$var parameter 32 9 CLKT $end
$var parameter 32 : period $end
$var reg 1 ; clk $end
$var reg 1 < enter $end
$var reg 1 = rst_n $end
$var reg 1 > sign $end
$scope module I_ALU_CTRL $end
$var wire 1 ; clk $end
$var wire 1 < enter $end
$var wire 4 ? func [3:0] $end
$var wire 2 @ reg_ctrl [1:0] $end
$var wire 1 = rst_n $end
$var wire 1 > sign $end
$var reg 2 A i_reg [1:0] $end
$var reg 1 B last_enter $end
$var reg 1 C last_sign $end
$var reg 2 D next_i_reg [1:0] $end
$var reg 4 E next_state [3:0] $end
$var reg 4 F state [3:0] $end
$upscope $end
$upscope $end
$scope module tb_ALU_top $end
$var wire 8 G sev_seg [7:0] $end
$var wire 8 H anode [7:0] $end
$var parameter 32 I CLKT $end
$var parameter 32 J period $end
$var reg 1 K b_enter $end
$var reg 1 L b_sign $end
$var reg 1 M clk $end
$var reg 1 N rst_n $end
$var reg 8 O sw_in [7:0] $end
$scope module I_ALU_TOP $end
$var wire 1 K b_enter $end
$var wire 1 L b_sign $end
$var wire 1 M clk $end
$var wire 1 N rst_n $end
$var wire 8 P sw_in [7:0] $end
$var wire 1 Q w_sign $end
$var wire 8 R w_result [7:0] $end
$var wire 2 S w_reg_ctrl [1:0] $end
$var wire 1 T w_overflow $end
$var wire 4 U w_func [3:0] $end
$var wire 10 V w_bcd_digit [9:0] $end
$var wire 8 W sev_seg [7:0] $end
$var wire 8 X led_scancode_debug [7:0] $end
$var wire 1 Y d_sign $end
$var wire 1 Z d_enter $end
$var wire 8 [ anode [7:0] $end
$var wire 8 \ B [7:0] $end
$var wire 8 ] A [7:0] $end
$scope module I_ALU $end
$var wire 1 Q sign $end
$var wire 9 ^ tmp [8:0] $end
$var wire 8 _ result [7:0] $end
$var wire 1 T overflow $end
$var wire 4 ` FN [3:0] $end
$var wire 8 a B [7:0] $end
$var wire 8 b A_mod3 [7:0] $end
$var wire 8 c A [7:0] $end
$var reg 9 d ALU_Result [8:0] $end
$var reg 9 e A_sign [8:0] $end
$var reg 1 f pn $end
$scope module my_mod3 $end
$var wire 8 g mod_out [7:0] $end
$var wire 1 h sign_in $end
$var wire 8 i mod_in [7:0] $end
$var reg 8 j mod3 [7:0] $end
$upscope $end
$upscope $end
$scope module I_ALU_CTRL $end
$var wire 1 M clk $end
$var wire 2 k reg_ctrl [1:0] $end
$var wire 1 N rst_n $end
$var wire 1 Y sign $end
$var wire 4 l func [3:0] $end
$var wire 1 Z enter $end
$var reg 2 m i_reg [1:0] $end
$var reg 1 n last_enter $end
$var reg 1 o last_sign $end
$var reg 2 p next_i_reg [1:0] $end
$var reg 4 q next_state [3:0] $end
$var reg 4 r state [3:0] $end
$upscope $end
$scope module I_BINARY_TO_BCD $end
$var wire 8 s binary_in [7:0] $end
$var wire 10 t bcd_out [9:0] $end
$var reg 4 u i [3:0] $end
$var reg 12 v reg_bcd_out [11:0] $end
$upscope $end
$scope module I_REG_UPDATER $end
$var wire 1 M clk $end
$var wire 2 w reg_ctrl [1:0] $end
$var wire 1 N rst_n $end
$var wire 8 x sw_input [7:0] $end
$var wire 8 y B [7:0] $end
$var wire 8 z A [7:0] $end
$var reg 8 { r_A [7:0] $end
$var reg 8 | r_B [7:0] $end
$upscope $end
$scope module I_SEVEN_SEGMENT_DRIVER $end
$var wire 10 } BCD_digit [9:0] $end
$var wire 1 M clk $end
$var wire 8 ~ digit_anode [7:0] $end
$var wire 1 T overflow $end
$var wire 1 N rst_n $end
$var wire 8 !" segment [7:0] $end
$var wire 1 Q sign $end
$var wire 8 "" led_out [7:0] $end
$var reg 4 #" routed_vals [3:0] $end
$var reg 32 $" segment_counter [31:0] $end
$var reg 8 %" segment_state [7:0] $end
$scope module my_converter $end
$var wire 4 &" BCD_digit [3:0] $end
$var wire 8 '" led_out [7:0] $end
$var reg 8 (" int_seven_segment_number [7:0] $end
$upscope $end
$upscope $end
$scope module enter_debouncer $end
$var wire 1 )" PB_idle $end
$var wire 1 K button_in $end
$var wire 1 Z button_out $end
$var wire 1 M clk $end
$var wire 1 N rst_n $end
$var wire 1 *" PB_cnt_max $end
$var reg 16 +" PB_cnt [15:0] $end
$var reg 1 ," PB_state $end
$var reg 1 -" PB_sync_0 $end
$var reg 1 ." PB_sync_1 $end
$upscope $end
$scope module sign_debouncer $end
$var wire 1 /" PB_idle $end
$var wire 1 L button_in $end
$var wire 1 Y button_out $end
$var wire 1 M clk $end
$var wire 1 N rst_n $end
$var wire 1 0" PB_cnt_max $end
$var reg 16 1" PB_cnt [15:0] $end
$var reg 1 2" PB_state $end
$var reg 1 3" PB_sync_0 $end
$var reg 1 4" PB_sync_1 $end
$upscope $end
$upscope $end
$upscope $end
$scope module tb_binary_to_bcd $end
$var wire 10 5" bcd_out [9:0] $end
$var parameter 32 6" CLKT $end
$var parameter 32 7" period $end
$var reg 1 8" Clk $end
$var reg 1 9" Rst_n $end
$var reg 8 :" binary_in [7:0] $end
$scope module I_BINARY_TO_BCD $end
$var wire 8 ;" binary_in [7:0] $end
$var wire 10 <" bcd_out [9:0] $end
$var reg 4 =" i [3:0] $end
$var reg 12 >" reg_bcd_out [11:0] $end
$upscope $end
$upscope $end
$scope module tb_reg_updater $end
$var wire 8 ?" B [7:0] $end
$var wire 8 @" A [7:0] $end
$var parameter 32 A" CLKT $end
$var parameter 32 B" period $end
$var reg 1 C" clk $end
$var reg 2 D" reg_ctrl [1:0] $end
$var reg 1 E" rst_n $end
$var reg 8 F" sw_input [7:0] $end
$scope module I_REG_UPDATER $end
$var wire 8 G" A [7:0] $end
$var wire 8 H" B [7:0] $end
$var wire 1 C" clk $end
$var wire 2 I" reg_ctrl [1:0] $end
$var wire 1 E" rst_n $end
$var wire 8 J" sw_input [7:0] $end
$var reg 8 K" r_A [7:0] $end
$var reg 8 L" r_B [7:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b101000 B"
b1010 A"
b101000 7"
b1010 6"
b101000 J
b1010 I
b101000 :
b1010 9
b101000 %
b1010 $
$end
#0
$dumpvars
bx L"
b11 K"
b11 J"
b0 I"
bx H"
b11 G"
b11 F"
1E"
b0 D"
0C"
b11 @"
bx ?"
b0 >"
b1000 ="
b0 <"
b0 ;"
b0 :"
19"
08"
b0 5"
x4"
x3"
x2"
bx 1"
x0"
x/"
x."
x-"
x,"
bx +"
x*"
x)"
b11000000 ("
b11000000 '"
b0 &"
b1 %"
b0 $"
b0 #"
b11000000 ""
b11000000 !"
b11111110 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b1000 u
b0 t
b0 s
b0 r
bx q
bx p
xo
xn
b0 m
b0 l
b0 k
bx j
b0 i
0h
bx g
0f
bx e
b0 d
b0 c
bx b
b0 a
b0 `
b0 _
b0 ^
b0 ]
b0 \
b11111110 [
xZ
xY
b0 X
b11000000 W
b0 V
b0 U
0T
b0 S
b0 R
0Q
b0 P
b0 O
0N
0M
0L
0K
b11111110 H
b11000000 G
b0 F
bx E
bx D
0C
0B
b0 A
b0 @
b0 ?
0>
0=
0<
0;
b0 8
b0 7
bx 6
05
bx 4
b101 3
02
bx 1
b101 0
bx /
b101 .
b1000 -
b0 ,
b11 +
b101 *
0)
b0 (
b11 '
b101 &
0#
b101 "
0!
$end
#1000
1N
#5000
xh
b1 $"
bx S
bx k
bx w
bx m
b0xxxx X
bx U
bx `
bx l
bx r
0-"
03"
1C"
18"
1M
1;
1)
#10000
0C"
08"
0M
0;
0)
#15000
b10 $"
04"
0."
1C"
18"
1M
1;
1)
#20000
0C"
08"
0M
0;
0)
#25000
b11 $"
1C"
18"
1M
1;
1)
#30000
0C"
08"
0M
0;
0)
#35000
b100 $"
1C"
18"
1M
1;
1)
#40000
b1001001001 5"
b1001001001 <"
b11 "
b11 .
b1001001001 >"
b1000 ="
b11 0
b11111001 :"
b11111001 ;"
1=
b1 (
b1 ,
b1100 -
b1001 &
b1001 *
b1001 3
0C"
08"
0M
0;
0)
#41000
1B
b1 D
b1 E
1<
b11 O
b11 P
b11 x
#45000
b101 $"
b1 7
b1 @
b1 A
b1 8
b1 ?
b1 F
1C"
18"
1M
1;
1)
#50000
0C"
08"
0M
0;
0)
#55000
b110 $"
1C"
18"
1M
1;
1)
#60000
0C"
08"
0M
0;
0)
#65000
b111 $"
1C"
18"
1M
1;
1)
#70000
0C"
08"
0M
0;
0)
#75000
b1000 $"
1C"
18"
1M
1;
1)
#80000
b10100010 "
b10100010 .
b10100010 0
b10 (
b10 ,
b10010001 '
b10010001 +
b10100010 -
b10001 &
b10001 *
b10001 3
0C"
08"
0M
0;
0)
#81000
0B
0<
1K
#85000
b1001 $"
1-"
1C"
18"
1M
1;
1)
#90000
0C"
08"
0M
0;
0)
#95000
b1010 $"
1."
1C"
18"
1M
1;
1)
#100000
0C"
08"
0M
0;
0)
#105000
b1011 $"
1C"
18"
1M
1;
1)
#110000
0C"
08"
0M
0;
0)
#115000
b1100 $"
1C"
18"
1M
1;
1)
#120000
b11 ?"
b11 H"
b11 L"
b10101 "
b10101 .
b10101 0
b1 D"
b1 I"
b11 (
b11 ,
b1111100 '
b1111100 +
b100001101 -
b10010001 &
b10010001 *
b10010001 3
0C"
08"
0M
0;
0)
#121000
1B
b11 D
b10 E
1<
0K
#125000
b1101 $"
0-"
b11 7
b11 @
b11 A
b10 8
b10 ?
b10 F
1C"
18"
1M
1;
1)
#130000
0C"
08"
0M
0;
0)
#135000
b1110 $"
0."
1C"
18"
1M
1;
1)
#140000
0C"
08"
0M
0;
0)
#145000
b1111 $"
1C"
18"
1M
1;
1)
#150000
0C"
08"
0M
0;
0)
#155000
b10000 $"
1C"
18"
1M
1;
1)
#160000
b1100 ?"
b1100 H"
b1100 L"
1!
12
1#
b1110011 "
b1110011 .
15
b101110011 0
b110001101 1
b1100 F"
b1100 J"
b1010 (
b1010 ,
b11111001 '
b11111001 +
b110001101 -
b10010100 &
b10010100 *
b10010100 3
0C"
08"
0M
0;
0)
#161000
0B
0<
b100 O
b100 P
b100 x
#165000
b10001 $"
1C"
18"
1M
1;
1)
#170000
0C"
08"
0M
0;
0)
#175000
b10010 $"
1C"
18"
1M
1;
1)
#180000
0C"
08"
0M
0;
0)
#185000
b10011 $"
1C"
18"
1M
1;
1)
#190000
0C"
08"
0M
0;
0)
#195000
b10100 $"
1C"
18"
1M
1;
1)
#200000
0#
b1001 "
b1001 .
b1001 0
b11110111 1
b11 D"
b11 I"
b1011 (
b1011 ,
b111 '
b111 +
b100000101 -
b11111110 &
b11111110 *
b11111110 3
0C"
08"
0M
0;
0)
#201000
1B
b11 E
1<
1K
#205000
b10101 $"
1-"
b11 8
b11 ?
b11 F
1C"
18"
1M
1;
1)
#210000
0C"
08"
0M
0;
0)
#215000
b10110 $"
1."
1C"
18"
1M
1;
1)
#220000
0C"
08"
0M
0;
0)
#225000
b10111 $"
1C"
18"
1M
1;
1)
#230000
0C"
08"
0M
0;
0)
#235000
b11000 $"
1C"
18"
1M
1;
1)
#240000
0!
02
b10000110 "
b10000110 .
05
b10000110 0
b11110 F"
b11110 J"
b10 (
b10 ,
b1100011 '
b1100011 +
b10000110 -
b100011 &
b100011 *
b100011 3
0C"
08"
0M
0;
0)
#241000
0B
0<
0K
#245000
b11001 $"
0-"
1C"
18"
1M
1;
1)
#250000
0C"
08"
0M
0;
0)
#255000
b11010 $"
0."
1C"
18"
1M
1;
1)
#260000
0C"
08"
0M
0;
0)
#265000
b11011 $"
1C"
18"
1M
1;
1)
#270000
0C"
08"
0M
0;
0)
#275000
b11100 $"
1C"
18"
1M
1;
1)
#280000
bx "
bx .
b0xxxxxxxx 0
b1011110 F"
b1011110 J"
b100 (
b100 ,
b1101000 '
b1101000 +
b1101010 -
b10 &
b10 *
b10 3
0C"
08"
0M
0;
0)
#281000
1C
b1011 E
1>
1K
#285000
b11101 $"
1-"
b1011 8
b1011 ?
b1011 F
1C"
18"
1M
1;
1)
#290000
0C"
08"
0M
0;
0)
#295000
b11110 $"
1."
1C"
18"
1M
1;
1)
#300000
0C"
08"
0M
0;
0)
#305000
b11111 $"
1C"
18"
1M
1;
1)
#310000
0C"
08"
0M
0;
0)
#315000
b100000 $"
1C"
18"
1M
1;
1)
#320000
b101101 '
b101101 +
b110000 -
b11 &
b11 *
b11 3
0C"
08"
0M
0;
0)
#321000
0C
0>
0K
#325000
b100001 $"
0-"
1C"
18"
1M
1;
1)
#330000
0C"
08"
0M
0;
0)
#335000
b100010 $"
0."
1C"
18"
1M
1;
1)
#340000
0C"
08"
0M
0;
0)
#345000
b100011 $"
1C"
18"
1M
1;
1)
#350000
0C"
08"
0M
0;
0)
#355000
b100100 $"
1C"
18"
1M
1;
1)
#360000
15
b1100 (
b1100 ,
b100100 '
b100100 +
b1111001 -
b1010101 &
b1010101 *
b1010101 3
0C"
08"
0M
0;
0)
#361000
1B
b1100 E
1<
1K
#365000
b100101 $"
1-"
b1100 8
b1100 ?
b1100 F
1C"
18"
1M
1;
1)
#370000
0C"
08"
0M
0;
0)
#375000
b100110 $"
1."
1C"
18"
1M
1;
1)
#380000
0C"
08"
0M
0;
0)
#385000
b100111 $"
1C"
18"
1M
1;
1)
#390000
0C"
08"
0M
0;
0)
#395000
b101000 $"
1C"
18"
1M
1;
1)
#400000
b0 "
b0 .
b0 0
b1111 (
b1111 ,
b0 '
b0 +
b0 -
b0 &
b0 *
b0 3
0C"
08"
0M
0;
0)
#401000
0B
0<
0K
#405000
b101001 $"
0-"
1C"
18"
1M
1;
1)
#410000
0C"
08"
0M
0;
0)
#415000
b101010 $"
0."
1C"
18"
1M
1;
1)
#420000
0C"
08"
0M
0;
0)
#425000
b101011 $"
1C"
18"
1M
1;
1)
#430000
0C"
08"
0M
0;
0)
#435000
b101100 $"
1C"
18"
1M
1;
1)
#440000
0C"
08"
0M
0;
0)
